using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace LinqTest
{
    class Program
    {

        static void Main(string[] args)
        {
            /*
            1/6   Введение

            Методы расширения (extension methods) определены для интерфейса IEnumerable, и это ещё один вариант использования LINQ, 
            кроме SQL- подобного синтаксиса.

            Запросы LINQ - задача из ветки master с использованием LINQ, реализованный с помощью методов расширения
            мы значительно сократили количество кода.
            */

            //выбрать имена на букву А и отсортировать в алфавитном порядке
            string[] people = { "Анна", "Мария", "Сергей", "Алексей", "Дмитрий", "Ян" };

            var selectedPeople = people.Where(p => p.StartsWith("А")).OrderBy(p => p);

            foreach (string s in selectedPeople)
                Console.WriteLine(s);
        }
    }
}

/*
Методы расширения (extension methods) определены для интерфейса IEnumerable, и это ещё один вариант использования LINQ, 
кроме SQL- подобного синтаксиса.

Как правило, их функционал идентичен операторам where и orderby. Количество методов расширения в LINQ очень обширно, 
наиболее простые и базовые из них мы рассмотрим ниже на коротких примерах. 

Таблица ниже содержит основные методы с простыми примерами, и они даны для ознакомления, чтобы вы сразу имели представление 
о новом арсенале возможностей по работе с коллекциями. Принцип работы большинства из них вам станет понятен сразу, но если нет, 
то смело идите дальше и не задерживайтесь, так как дальше все они будут рассмотрены более детально.

Вся мощь LINQ проявляется в том, как эти методы можно сочетать, вызывая один за другим, и применяя таким образом множественные фильтры.

            Задание 8
            Дан список объектов:

            var objects = new List<object>()
            {
              1,
              "Сергей ",
              "Андрей ",
              300,
            };

            1. Используйте выражения LINQ, чтобы достать оттуда все имена и вывести их в консоль в алфавитном порядке.

            Ответ:
               var names = from a in objects
                    where a is string // проверка на совместимость с типом
                    orderby a // сортировка по имени
                    select a; // выборка
 
           foreach (var name in names)
               Console.WriteLine(name);

            2. Перепишите программу из задания выше, используя методы-расширения так, чтобы вывод на консоль и сортировка происходили в две строчки.

            foreach (var stringObject in objects.Where( o => o is string).OrderBy(o => o))
                Console.WriteLine(stringObject);

*/


