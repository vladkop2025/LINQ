using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace LinqTest
{
    class Program
    {

        static void Main(string[] args)
        {
            /*
            Введение - удобный инструмент — LINQ, или Language Integrated Query

            Запросы LINQ - задача из ветки master с использованием LINQ
            мы значительно сократили количество кода.
            */

            //выбрать имена на букву А и отсортировать в алфавитном порядке
            string[] people = { "Анна", "Мария", "Сергей", "Алексей", "Дмитрий", "Ян" };

            var selectedPeople = from p in people // промежуточная переменная p 
                                 where p.StartsWith("А") // фильтрация по условию
                                 orderby p // сортировка по возрастанию (дефолтная)
                                 select p; // выбираем объект и сохраняем в выборку

            foreach (string s in selectedPeople)
                Console.WriteLine(s);
        }
    }
}

/*
 * Давайте разберем этот пример LINQ-запроса, посмотрим, что в нем происходит, и попробуем условно перевести на человеческий язык: 

    from variable in collection // каждую переменную в коллекции
    where condition // для которой выполняется условие
    select variable; // добавить в выборку

Теперь что происходит «под капотом»:

Выражение from p in people проходит по всем элементам массива people и определяет каждый элемент как p. 
Используя временную переменную p, мы можем проводить над ней разные операции. 
Переменная p существует только во время выполнения выражения LINQ.
Несмотря на то, что мы не указываем тип переменной, выражения LINQ являются строго типизированными. Среда выполнения автоматически 
распознает её как строку точно так же, как происходит с ключевым словом var.
Далее с помощью оператора where проводится фильтрация объектов, и если объект соответствует критерию, то этот объект передаётся дальше.
Необязательный оператор orderby упорядочивает по возрастанию, то есть сортирует выбранные объекты.
И, наконец, оператор select включает результат в выборку.
В данном случае результатом выражения LINQ является объект IEnumerable<T>, который затем можно преобразовать в любую нужную нам коллекцию, 
вызвав метод расширения, например ToList(), ToArray() и так далее.
*/